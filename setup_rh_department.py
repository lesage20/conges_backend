"""
Script pour configurer le d√©partement Ressources Humaines et assigner le DRH comme chef.
"""
import asyncio
import uuid
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy import select, and_
from models.database import get_database_url
from models.user import User, RoleEnum
from models.departement import Departement

async def setup_rh_department():
    """Configure le d√©partement RH et assigne le DRH comme chef"""
    # Cr√©er le moteur async pour ce script
    engine = create_async_engine(get_database_url(), echo=True)
    
    async with AsyncSession(engine) as db:
        print("üîß Configuration du d√©partement Ressources Humaines...")
        
        try:
            # 1. Chercher s'il existe d√©j√† un d√©partement RH
            result = await db.execute(
                select(Departement).where(
                    Departement.nom.in_(["Ressources Humaines", "RH", "DRH"])
                )
            )
            dept_rh = result.scalar_one_or_none()
            
            if not dept_rh:
                # Cr√©er le d√©partement RH
                dept_rh = Departement(
                    nom="Ressources Humaines",
                    description="D√©partement de gestion des ressources humaines",
                    budget_conges="0"
                )
                db.add(dept_rh)
                await db.flush()  # Pour obtenir l'ID
                print(f"‚úÖ D√©partement 'Ressources Humaines' cr√©√© avec l'ID: {dept_rh.id}")
            else:
                print(f"‚úÖ D√©partement RH existant trouv√©: {dept_rh.nom} (ID: {dept_rh.id})")
            
            # 2. Chercher le DRH
            result = await db.execute(
                select(User).where(User.role == RoleEnum.DRH)
            )
            drh = result.scalar_one_or_none()
            
            if not drh:
                print("‚ùå Aucun utilisateur avec le r√¥le DRH trouv√©. Veuillez d'abord cr√©er un utilisateur DRH.")
                return
            
            print(f"‚úÖ DRH trouv√©: {drh.prenom} {drh.nom} (ID: {drh.id})")
            
            # 3. Assigner le DRH au d√©partement RH s'il n'y est pas d√©j√†
            if drh.departement_id != dept_rh.id:
                drh.departement_id = dept_rh.id
                print(f"‚úÖ DRH assign√© au d√©partement Ressources Humaines")
            
            # 4. Assigner le DRH comme chef du d√©partement RH
            if dept_rh.chef_departement_id != drh.id:
                dept_rh.chef_departement_id = drh.id
                print(f"‚úÖ DRH d√©fini comme chef du d√©partement Ressources Humaines")
            
            await db.commit()
            
            # 5. V√©rifier les autres employ√©s du d√©partement RH
            result = await db.execute(
                select(User).where(
                    and_(
                        User.departement_id == dept_rh.id,
                        User.role == RoleEnum.EMPLOYE
                    )
                )
            )
            employes_rh = result.scalars().all()
            
            if employes_rh:
                print(f"‚úÖ {len(employes_rh)} employ√©(s) trouv√©(s) dans le d√©partement RH:")
                for emp in employes_rh:
                    print(f"   - {emp.prenom} {emp.nom}")
            else:
                print("‚ÑπÔ∏è  Aucun employ√© actuellement assign√© au d√©partement RH")
            
            print("\nüéâ Configuration termin√©e avec succ√®s !")
            print("üìã R√©sum√© de la hi√©rarchie:")
            print(f"   ‚Ä¢ DRH: {drh.prenom} {drh.nom}")
            print(f"   ‚Ä¢ Chef du d√©partement RH: {drh.prenom} {drh.nom}")
            print(f"   ‚Ä¢ R√®gles d'approbation:")
            print(f"     - Demandes DRH: Auto-approuv√©es")
            print(f"     - Demandes chefs de service: Valid√©es par le DRH")
            print(f"     - Demandes employ√©s RH: Valid√©es par le DRH")
            print(f"     - Demandes employ√©s autres d√©partements: Valid√©es par leur chef de service")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la configuration: {e}")
            await db.rollback()
            raise
        finally:
            await engine.dispose()

async def main():
    await setup_rh_department()

if __name__ == "__main__":
    asyncio.run(main()) 